// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  password  String?
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follow[] @relation("follower") // Users following the user
  following Follow[] @relation("following") // Users the user is following

  notifications        Notification[] @relation("notifications") // Notifications received
  notificationsCreated Notification[] @relation("notificationsCreator") // Notifications created/triggered by the user
}

model Post {
  id        String   @id @default(uuid())
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade) // Delete all posts by a user when the user is deleted
  authorId String

  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  authorId     String
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId       String
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([authorId, postId]) // Composite index: faster queries
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //Relations
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@unique([postId, userId]) // Prevent duplicate likes
  @@index([postId, userId]) // Composite index: faster queries
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // Composite primary key
  @@index([followerId, followingId]) // Composite index: faster queries
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  likeId    String?
  createdAt DateTime         @default(now())

  //Relations
  user    User     @relation("notifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  like    Like?    @relation(fields: [likeId], references: [id], onDelete: Cascade)

  @@index([userId, read]) // Faster queries for fetching unread notifications
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}
